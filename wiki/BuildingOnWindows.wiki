#summary Building on Windows
#labels Development,Notes

_Applies to releases after (and including) 2012.09.2_

For source releases prior to Q4 2009, look at BuildingOnWindows_preQ42012

== Software to Install ==
  * Microsoft Visual C++ : The Express version has everything necessary and can be downloaded for free [http://www.microsoft.com/express/download/ from Microsoft]. This is a big installation and will take a while. The RDKit has been successfully built with all version of visual c++ since 6.0, so the current version of VC++ (2010 as of this writing) should be fine. 
  * cmake : [http://www.cmake.org/cmake/resources/software.html cmake] should be installed.
  * python : [http://www.python.org/download python] should be installed
  * numpy : the [http://sourceforge.net/project/showfiles.php?group_id=1369&package_id=175103 current version of numpy] should be installed. It's fine to use the binary installer. Binaries for win64 are available here: http://www.lfd.uci.edu/~gohlke/pythonlibs/#numpy
  * boost : It is recommended that you use a precompiled version of the boost libraries from http://www.boostpro.com/download/ . If you must build your own version, you can get a source download from http://www.boost.org and follow the build instructions there.
  * a subversion client : _This is only necessary if you are planning on building development versions of the RDKit_. A command line client for subversion can be installed as part of the cygwin installation, or a very nice graphical client that integrates well with windows explorer can be downloaded from the [http://tortoisesvn.tigris.org/ Tortoise SVN home page].
  * Optional packages
    * If you would like to install the RDKit InChI support (first available in the Q2 2011 release), follow the instructions in $RDBASE/External/INCHI-API to get a copy of the InChI source and put it in the appropriate place.

== Setup and Preparation ==
This section assumes that python is installed in c:\Python27, that the boost libraries have been extracted to c:\boost\boost_1_43_0, and that you will build the RDKit from a directory named c:\RDKit. If any of these conditions is not true, just change the corresponding paths. 

_Notes_ :
    # If you install things in paths that have spaces in their names, be sure to use quotes properly in your environment variable definitions.
    # If you have more than one version of visual studio installed, the instructions below may not use the correct compiler. In this case you need to use a different `--toolset` argument to specify the version of the compiler used in all commands. Information for this situation is covered in [http://www.boost.org/doc/libs/1_43_0/more/getting_started/windows.html the boost.build documentation].

  * If you are planning on using a development version of the RDKit: get a copy of the current RDKit source using subversion. If you're using the command-line client the command is: `svn co  http://svn.code.sf.net/p/rdkit/code/trunk c:\RDKit` 
  * If you are planning on using a released version of the RDKit : get a copy of the most recent release and extract it into the directory c:\RDKit 
  * Set the required environment variables (you can set this in cygwin or in windows. If you set them in windows, be sure to restart your cygwin window):
    * RDBASE = c:\RDKit  *Note* in releases Q3 2010 and later this variable is only required to run the tests.
  * Make sure that the directory c:\Python27 is in your PATH
  * Make sure that the directory c:\RDKit\lib is in your PATH
  * Make sure that the directory containing the boost DLLs is in your PATH
  * Make sure that the directory c:\RDKit is in your PYTHONPATH

== Building the Code Using GUIs ==
  * environment variables:
    * if you built your own version of boost and cmake complains about not being able to find it, define the environment variable BOOST_ROOT to point to the directory containing the boost source.
  * Configure the build:
    * Start the cmake gui
    * tell it where the source code is (e.g. c:/RDKit) and where to build the binaries (recommended: c:/RDKit/build)
    * click "Configure", select your compiler, and wait until the basic configuration is complete, you'll see a bunch of red lines entries in the main windows.
    * click "Configure" again
    * click "Generate"
  * Build:
    * open the solution file that cmake created (c:/RDKit/build/RDKit.sln) with Visual Studio.
    * check to be sure that you're building a Release build (for some reason CMake produces solution files that default to doing a Debug build)
    * build the "ALL_BUILD" target; this will take a while and generate warnings, but there should be no errors. *Note:* if you are building the SWIG wrappers you may get an error the first time you try to build them. If you see this error, try building ALL_BUILD again; it should work the second time.
    * build the "INSTALL" target

== Building the Code Using the Command Line ==
  * environment variables:
    * if you built your own version of boost and cmake complains about not being able to find it, define the environment variable BOOST_ROOT to point to the directory containing the boost source.
  * Create an $RDBASE/build directory and cd into it.
  * Run cmake. Here's an example basic command line for 64bit windows: 
`cmake -DBOOST_ROOT=c:/boost/boost64_151 -G"Visual Studio 10 Win64" ..`
  * Build the code. Here's an example command line:
`c:/Windows/Microsoft.NET/Framework64/v4.0.30319/MSBuild.exe  /m:4 /p:Configuration=Release INSTALL.vcxproj`

== Testing the Build (optional, but recommended) ==
  * cd to $RDBASE/build and run `ctest`
  * you're done!

== Additional notes ==
  * There is a bug in boost v1.44 that causes link errors related to boost-serialization on windows. To fix this you need to edit one of the boost header files. [https://groups.google.com/group/boost-list/msg/066897d43d9ca27a?hl=en This post] contains instructions on what needs to be done.