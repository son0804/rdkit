#summary The RDKit and thread-safety.
#labels Development,Notes

= Notes about this document = 
  * This document only applies to release v2012_03_1 and later releases of the RDKit.
  * This document does not apply to using the RDKit from Python threads. `Boost.Python` ensures that only one thread is calling into the C++ code at any point. To get concurrent execution in Python, use the `multiprocessing` module.


= What has been tested =

  * Reading molecules from SMILES/SMARTS/Mol blocks
  * Writing molecules to SMILES/SMARTS/Mol blocks
  * Generating conformations with the DistGeom code.
  * Optimizing molecules with the UFF code.
  * Generating fingerprints.
  * The descriptor calculators in `$RDBASE/Code/GraphMol/Descriptors`
  * Substructure searching (*Note:* if a query molecule contains recursive queries, it is not safe to use it concurrently on multiple threads, see below).
  * The 2D coordinate generation (depiction) code.


= Known problems =

  * InChI generation and (probably) parsing. This seems to be a limitation of the IUPAC InChI code. In order to allow the code to be used in a multi-threaded environment, a mutex is used to ensure that only one thread is using the IUPAC code at a time. This is only enabled if the RDKit is built with the `RDK_TEST_MULTITHREADED` option enabled.
  * The MolSuppliers (e.g. SDMolSupplier, SmilesMolSupplier) change their internal state when a molecule is read. It is *not* safe to use one supplier on more than one thread.
  * Substructure searching using query molecules that include recursive queries. The recursive queries modify their internal state when a search is run, so it's not safe to use the same query concurrently on multiple threads.