#summary Linux build instructions

The instructions below are for source distributions from Q1 2009 on. 
= Building on Linux =

== Getting Ready ==
 * Required packages:
   * Blas and lapack. This is also probably just a matter of finding the appropriate package for your linux.
   * flex and bison. These are frequently already installed if you have the various pieces of the development environment installed
   * The following are required if you are planning on using the Python wrappers:
      * The python headers. This probably means that you need to install the python-dev package (or whatever it's called) for your linux distribution.
      * sqlite3. You also need the shared libraries. This may require that you install a sqlite3-dev package.
      * You need to have numpy (http://www.scipy.org/NumPy) installed.

== Installing Boost ==
  * download the boost source distribution from [http://www.boost.org the boost web site]
  * extract the source to a _non-temporary_ location on your machine, you're going to need it to build the RDKit as well as boost. (e.g. `/usr/local/src/boost_1_37_0`)
  * The following are required if you are planning on using the Python wrappers:
    * build and install the required boost shared libraries: 
     * `cd $BOOST`
     * Building on 32 bit systems: `bjam  --with-thread --with-python release install`
     * Building on 64 bit systems: `bjam  --with-thread --with-python address-model=64 release install`

    If you have any problems with this step, check the boost [http://www.boost.org/more/getting_started/unix-variants.html installation instructions].

== Installing the boost numeric bindings ==
  * download the most recent version of the boost numeric bindings from [http://mathema.tician.de/dl/software/boost-bindings http://mathema.tician.de/dl/software/boost-bindings].
  * extract the tar ball to some temporary location.
  * copy the directory `boost-numeric-bindings/boost/numeric/bindings` to `$BOOST/boost/numeric`
  * copy the directory `boost-numeric-bindings/libs/numeric/bindings` to `$BOOST/libs/numeric`


== Building the Code ==
  * follow the Installing Boost instructions above.
  * environment variables:
    * RDBASE: the root directory of the RDKit distribution (e.g. ~/RDKit)
    * BOOSTHOME: should be wherever you extracted the boost source (e.g. /usr/local/src/boost_1_37_0)
    * BOOST_BUILD_PATH: should be the same as $BOOSTHOME
    * LD_LIBRARY_PATH: make sure it includes $RDBASE/bin and wherever the boost shared libraries were installed
    * The following are required if you are planning on using the Python wrappers:
      * PYTHON_ROOT: wherever python is installed (e.g. /usr)
      * PYTHON_VERSION: the first two digits of the python version (e.g. 2.5, *not* 2.5.1)
      * PYTHONPATH: make sure it includes $RDBASE
  * Building: 
    * cd to $RDBASE/Code 
    * If you are planning on using the Python wrappers:
      * do `python CompleteJamroot.py`
      * 32 bit systems: `bjam` 
      * 64 bit systems: `bjam address-model=64`
    * without the Python wrappers:
      * 32 bit systems: `bjam all-libraries` 
      * 64 bit systems: `bjam address-model=64 all-libraries`
  this builds all libraries, regression tests, and wrappers (by default). This command will generate a lot of text (mostly compiler warnings), but it should not generate any errors. At the end you should *not* see any messages about failed or skipped targets. 

== Testing the Build (optional, but recommended) ==
  * cd to $RDBASE/Code and do `python $RDBASE/rdkit/TestRunner.py test_list.py`
  * create the databases used by the Python tests, requires sqlite3 to be installed:
    * `sqlite3 $RDBASE/Data/RDTests.sqlt < $RDBASE/rdkit/Dbase/test_data/RDTests.sqlite`
    * `sqlite3 $RDBASE/Data/RDData.sqlt < $RDBASE/rdkit/Dbase/test_data/RDData.sqlite`
  * cd to $RDBASE/Python and do: `python $RDBASE/rdkit/TestRunner.py test_list.py`
  * cd to $RDBASE/Projects and do: `python $RDBASE/rdkit/TestRunner.py test_list.py`