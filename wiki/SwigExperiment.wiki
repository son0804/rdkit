#summary Experimenting with a SWIG wrapper
#labels Development

= Configuration Notes =
  * Ubuntu linux, Gutsy Gibbon
  * Installed packages:
    ** sun-java6-bin
    ** sun-java6-jdk
    ** sun-java6-jre
    ** swig (v1.3.34 installed from source, older versions do not work due to lack of smart_pointer support.)
    ** swig-doc
    ** swig-examples
  * Configuration changes:
    ** `ln -s /usr/lib/jvm/java-6-sun-1.6.0.03/include /usr/include/java`

= Information Sources =
  * [http://www.swig.org/Doc1.3/Java.html#Java SWIG Java documentation]
  * SwigAndBoostBuild
  * BasicJavaBuild

= RDKit Sample =
  * Run bjam: `% bjam`
  * ~~compile: `% javac main.java swig_java/*.java`~~ Now part of the jamfile
  * run: `% java -classpath swig_java:. main`

= Trying to get all this stuff a bit more standard =

Mainly we want to get a jar file and have it work.

  * what we need to do with swig: `swig -c++ -java -outdir org/RDKit -package org.RDKit -I$RDBASE/Code -o RDKFuncs_wrap.cpp RDKFuncs.i`
  * bjam to build the .so
  * `javac org/RDKit/*.java`
  * `jar cf RDKit_Wrapper.jar org`
  * `javac -cp RDKit_Wrapper.jar:/home/glandrum/java/junit4.4/junit-4.4.jar WrapperTests.java`
  * `java -cp .:/home/glandrum/java/junit4.4/junit-4.4.jar:RDKit_Wrapper.jar WrapperTests`

The above has all been set up in the Jamfile and is included in the Q3_2008 release. In theory, if everything is installed correctly, one should be able to simply do:
  * `cd $RDBASE/Code/Demos/SWIG/java_example`
  * `bjam` 
To test it: 
  * `python test_list.py`  

= Using the wrapper from jython =

  * Invoke jython like this: `CLASSPATH=$CLASSPATH:RDKit_Wrapper.jar; jython -Djava.library.path=.`
  * And now this works:
{{{
>>> from org.RDKit import *
>>> from java import lang
>>> lang.System.loadLibrary('RDKFuncs')
>>> m = RDKFuncs.MolFromSmiles('c1ccccc1')
>>> m.getNumAtoms()
6L
}}}