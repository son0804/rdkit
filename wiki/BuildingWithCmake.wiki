#summary New Linux (and Mac) build instructions
#labels Development,Notes

The instructions below are for the Q42009 release and subsequent releases.

= Building on Linux or the Mac =

== Getting Ready ==
 * Required packages:
   * cmake. You need version 2.6 (or more recent). http://www.cmake.org if your linux distribution doesn't have an appropriate package. _Update: It seems that v2.8 is a better bet than v2.6. It might be worth compiling your own copy of v2.8 even if v2.6 is already installed._
   * flex and bison. These are frequently already installed if you have the various pieces of the development environment installed
   * The following are required if you are planning on using the Python wrappers:
      * The python headers. This probably means that you need to install the python-dev package (or whatever it's called) for your linux distribution.
      * sqlite3. You also need the shared libraries. This may require that you install a sqlite3-dev package.
      * You need to have numpy (http://www.scipy.org/NumPy) installed.

*Mac Note* : I have tested this under Leopard using the standard MacOS development tools and python 2.5 distribution.

== Installing Boost ==
  * *NOTE*: if your linux distribution has a boost-devel package including the python libraries, you may be able to use that and save yourself the steps below. I haven't tested this. _Update: if you *do* have a version of the boost libraries pre-installed and you want to use your own version, be careful when you build the code. We've seen at least one example on a Fedora system where cmake compiled using a user-installed version of boost and then linked against the system version. This led to segmentation faults._
  * download the boost source distribution from [http://www.boost.org the boost web site]
  * extract the source somewhere on your machine, you're going to need it to build the RDKit as well as boost. (e.g. `/usr/local/src/boost_1_40_0`)
  * The following are required if you are planning on using the Python wrappers:
    * build and install the required boost shared libraries: 
     * `cd $BOOST`
     * Building on 32 bit systems: `bjam --with-python release install`
     * Building on 64 bit systems: `bjam --with-python address-model=64 release install`

    If you have any problems with this step, check the boost [http://www.boost.org/more/getting_started/unix-variants.html installation instructions].

== Building the Code ==
  * follow the Installing Boost instructions above.
  * environment variables:
    * RDBASE: the root directory of the RDKit distribution (e.g. ~/RDKit)
    * *Linux:* LD_LIBRARY_PATH: make sure it includes $RDBASE/bin and wherever the boost shared libraries were installed
    * *Mac:* DYLD_LIBRARY_PATH: make sure it includes $RDBASE/bin and wherever the boost shared libraries were installed
    * The following are required if you are planning on using the Python wrappers:
      * PYTHONPATH: make sure it includes $RDBASE
    * if you built your own version of boost and cmake complains about not being able to find it, define the environment variable BOOST_ROOT to point to the directory containing the boost source.
  * Building: 
    * cd to $RDBASE
    * `mkdir build`
    * `cd build`
    * `cmake ..` : See the section below on configuring the build if you need to specify a non-default version of python
    * `make` : this builds all libraries, regression tests, and wrappers (by default).
    * `make install`

== Testing the Build (optional, but recommended) ==
  * create the databases used by the Python tests, requires sqlite3 to be installed:
    * `sqlite3 $RDBASE/Data/RDTests.sqlt < $RDBASE/rdkit/Dbase/test_data/RDTests.sqlite`
    * `sqlite3 $RDBASE/Data/RDData.sqlt < $RDBASE/rdkit/Dbase/test_data/RDData.sqlite`
  * cd to $RDBASE/build and do `ctest`
  * you're done!

== Advanced : Configuring the Build ==

=== Specifying an alternate Python installation ===

You need to tell cmake where to find the python library it should link against and the python header files.

Here's a sample command line:

{{{cmake -D PYTHON_LIBRARY=/usr/lib/python2.5/config/libpython2.5.a -D PYTHON_INCLUDE_DIR=/usr/include/python2.5/ -D PYTHON_EXECUTABLE=/usr/bin/python ..}}}

The `PYTHON_EXECUTABLE` part is optional if the correct python is the first version in your PATH.

=== Disabling the Python wrappers ==

You can completely disable building of the python wrappers by setting the configuration variable RDK_BUILD_PYTHON_WRAPPERS to nil:

{{{cmake -D RDK_BUILD_PYTHON_WRAPPERS= ..}}}