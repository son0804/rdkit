#summary Ideas for GSOC 2013 projects
#labels Notes

==C++==
  * Erg fingerprints (http://pubs.acs.org/doi/abs/10.1021/ci050457y)
  * Unique ring families (http://pubs.acs.org/doi/abs/10.1021/ci200629w)
  * Fixing the bit assignment in the rdkit and layered fingerprints (canonical subgraph traversal)
  * Canonical graph traversal code
  * Tautomer enumeration and canonicalization
  * Canonical Kekule form
  * Add a new force field (MMFF?)
  * Improved molecule drawing code
  * Port MCS code -> C++
  * Implementation of Noel O'Boyle's InChI-driven canonicalization (http://www.jcheminf.com/content/4/1/22/abstract)
  * add support for sequence types (i.e. proteins, DNA, polysaccharides etc.)
  * Implement a parser for the HELM language for describing sequences (http://pubs.acs.org/doi/abs/10.1021/ci3001925)
  * Add a parser for PDB files
  * Add bond-perception code based on an algorithm such as the one recently published by Rarey et. al (http://pubs.acs.org/doi/abs/10.1021/ci300358c)
  * Port SMILES/SMARTS parsers from flex/bison -> Boost.spirit
  * implement Pubchem fingerprints. Description (ftp://ftp.ncbi.nlm.nih.gov/pubchem/specifications/pubchem_fingerprints.txt); reference Java implementation (https://bitbucket.org/caodac/pcfp/src)
  * Implement a parser for the language describing the Lilly reactivity/promiscuity filters. (http://pubs.acs.org/doi/full/10.1021/jm301008n, reference code here: https://github.com/IanAWatson/Lilly-Medchem-Rules)



==Python==
  * Pypi integration 
  * rdkit type support in psycopg2
  * rdkit type support in pandas
  * rdkit type support in SQLAlchemy (building on Riccardo V's work)
  * improved iPython notebook integration:
     * control over rendering settings
     * browse interface for sets of molecules
     * molecule picker  

==KNIME==


==Cartridge==
  * Similarity search performance: 
    * Revisit cartridge fingerprint index for efficiency
    * Cartridge optimization to use words instead of bytes for similarity
    * Improved similarity calculation for sparse FPs.
  * Reaction support in the cartridge


==Integration==
  * Code to automatically generate docs in the SWIG wrappers
  * Javascript canvas renderer implementation. Ideally with atom selection
  * Use emscripten (https://github.com/kripken/emscripten) to get basic chemistry functionality into javascript
  * integration with google's Native Client

 