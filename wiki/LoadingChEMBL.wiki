#summary Loading the full ChEMBL database into PostgreSQL
#labels cartridge,Notes

  _*Note*_ : These instructions have been moved to the new online documentation: https://rdkit.readthedocs.org/en/latest/Cartridge.html#creating-databases.
The older version of these instructions can be found on the wiki page LoadingChemblOld


= Introduction =

= Getting the raw data into PostgreSQL =

  _*Note*_ : As of ChEMBL release 14, this section is no longer necessary. A PostgreSQL version of the data is now directly available from the ChEMBL team: http://chembl.blogspot.ch/2012/08/chembl-postgresql.html

Start by downloading the MySQL dump of ChEMBL_13: (ftp://ftp.ebi.ac.uk/pub/databases/chembl/ChEMBLdb/releases/chembl_13/chembl_13_mysql.tar.gz)
and creating a MySQL database from it.

Convert that to a PostgreSQL database using [https://bitbucket.org/akuchling/mysql2pgsql mysql2pgsql] :
{{{
./my2pg.py -v --mysql-user=username --mysql-password=password \
 --pg-user=username --pg-password=password \
 --drop-tables localhost chembl_13 localhost chembl_13
}}}
In order to process the data tables in ChEMBL I needed to make a few changes to `my2pg.py`. The modified version is here:
http://pastebin.com/0hsZ7LxX

Thanks to Adrian Schreyer for the pointer to my2pg.


= Creating the RDKit tables =

You need to start by making sure the RDKit cartridge is loaded into the chembl database:
{{{
chembl_13=# create extension if not exists rdkit;
}}}


Because there are problems with the SMILES that are present in the ChEMBL data, I build the RDKit molecules from the CTABS:
{{{
chembl_13=# create schema rdk;
chembl_13=# select * into rdk.mols from (select molregno,mol_from_ctab(molfile::cstring) m  from compound_structures) tmp where m is not null;
SELECT 1142370
chembl_13=# create index molidx on rdk.mols using gist(m);
CREATE INDEX
chembl_13=# select molregno,torsionbv_fp(m) as torsionbv,morganbv_fp(m,2) as mfp2,featmorganbv_fp(m,2) as ffp2 into rdk.fps from rdk.mols;
SELECT 1142370
chembl_13=# create index fps_ttbv_idx on rdk.fps using gist(torsionbv);
CREATE INDEX
chembl_13=# create index fps_mfp2_idx on rdk.fps using gist(mfp2);
CREATE INDEX
chembl_13=# create index fps_ffp2_idx on rdk.fps using gist(ffp2);
CREATE INDEX
chembl_13=# alter table rdk.mols add primary key (molregno);
NOTICE:  ALTER TABLE / ADD PRIMARY KEY will create implicit index "mols_pkey" for table "mols"
ALTER TABLE
chembl_13=# alter table rdk.fps add primary key (molregno);
NOTICE:  ALTER TABLE / ADD PRIMARY KEY will create implicit index "fps_pkey" for table "fps"
ALTER TABLE
}}}

To help with matched pair/activity cliff analyses, build a table with count-based topological torsion fingerprints:
{{{
chembl_13=# select molregno,torsion_fp(m) as torsionfp into rdk.pairfps from rdk.mols;
SELECT 998577
Time: 289626.695 ms
chembl_13=# create index pairfps_torsionfp on rdk.pairfps using gist(torsionfp);
CREATE INDEX
Time: 116155.275 ms
chembl_13=# alter table rdk.pairfps add primary key (molregno);
NOTICE:  ALTER TABLE / ADD PRIMARY KEY will create implicit index "pairfps_pkey" for table "pairfps"
ALTER TABLE
Time: 747.457 ms
}}}


= Benchmarking =

{{{
chembl_13=# select count(*) from rdk.mols where m @> 'c1ncncn1';
 count 
-------
  5388
(1 row)

Time: 17920.823 ms
chembl_13=# select count(*) from rdk.mols where m @> 'O=C1OC2=CC=CC=C2C=C1';
 count 
-------
  9991
(1 row)

Time: 2049.050 ms
chembl_13=# select count(*) from rdk.mols where m @> 'O=C(NC1=CC=CC=C1)C1=CC2=C(OC1=O)C=CC=C2' ;
 count 
-------
   197
(1 row)

Time: 667.749 ms
chembl_13=# select * from rdk.mols where m @> 'O=c:1:[o,n]:c:2:c:c:c:c:c:2:c:c:1'::qmol limit 500;
 molregno |                                                      m                                                       
----------+--------------------------------------------------------------------------------------------------------------
      106 | O=c1oc2c(O)c(O)ccc2c2ccc(O)cc12
      107 | O=c1oc2ccccc2c2ccccc12
      108 | O=c1oc2c(O)c(O)ccc2c2ccccc12
      109 | O=c1oc2ccccc2c2cc(O)c(O)cc12
      110 | O=c1oc2cc(O)c(O)cc2c2cc(O)c(O)cc12
   ... snip ...
Time: 1529.782 ms
chembl_13=# set rdkit.tanimoto_threshold=0.6;
SET
Time: 0.177 ms
chembl_13=# select rdk.mols.*,tanimoto_sml(mfp2,morganbv_fp('CC1=CC(C)(C)Nc2cc3oc(=O)cc(C(F)(F)F)c3cc21'::mol)) sim from rdk.fps join rdk.mols using (molregno) where mfp2%morganbv_fp('CC1=CC(C)(C)Nc2cc3oc(=O)cc(C(F)(F)F)c3cc21'::mol) ;
 molregno |                       m                       | sim  
----------+-----------------------------------------------+------
      823 | CC1=CC(C)(C)Nc2cc3oc(=O)cc(C(F)(F)F)c3cc21    |    1
   262773 | CC1=CC(C)(C)Nc2cc3c(cc21)c(C(F)(F)F)cc(=O)n3C | 0.64
(2 rows)

Time: 1121.025 ms
chembl_13=# select rdk.mols.*,tanimoto_sml(torsionfp,torsion_fp('CC1=CC(C)(C)Nc2cc3oc(=O)cc(C(F)(F)F)c3cc21'::mol)) sim from rdk.pairfps join rdk.mols using (molregno) where torsionfp%torsion_fp('CC1=CC(C)(C)Nc2cc3oc(=O)cc(C(F)(F)F)c3cc21'::mol) ;
 molregno |                       m                        |        sim        
----------+------------------------------------------------+-------------------
      823 | CC1=CC(C)(C)Nc2cc3oc(=O)cc(C(F)(F)F)c3cc21     |                 1
      791 | CC1(C)CCc2cc3c(cc2N1)oc(=O)cc3C(F)(F)F         | 0.603448275862069
   219275 | CC1=CC(C)(C)Nc2cc3nc(Cl)cc(C(F)(F)F)c3cc21     | 0.684210526315789
   219277 | CC1=CC(C)(C)Nc2cc3nc(F)cc(C(F)(F)F)c3cc21      | 0.684210526315789
   262707 | CCn1c(=O)cc(C(F)(F)F)c2cc3c(cc21)NC(C)(C)C=C3C | 0.645161290322581
   262773 | CC1=CC(C)(C)Nc2cc3c(cc21)c(C(F)(F)F)cc(=O)n3C  | 0.666666666666667
   262934 | CC1=CC(C)(C)Nc2cc3nc(O)cc(C(F)(F)F)c3cc21      | 0.684210526315789
(7 rows)

Time: 771.264 ms
}}}

That similarity search pattern is a common one, make it easier to use and more useful by returning results in sorted order. NOTE: this uses the KNN operator and only works with PostgreSQL v9.1 and later:
{{{
chembl_13=# create or replace function get_mfp2_neighbors(smiles text)
  returns table(molregno int, m mol, similarity double precision) as
$$
select molregno,m,tanimoto_sml(morganbv_fp($1::mol),mfp2) as similarity
from rdk.fps join rdk.mols using (molregno) 
where morganbv_fp($1::mol)%mfp2 
order by morganbv_fp($1::mol)<%>mfp2;
$$ language sql stable ;
chembl_13=# select * from get_mfp2_neighbors('CC1=CC(C)(C)Nc2cc3oc(=O)cc(C(F)(F)F)c3cc21');
 molregno |                       m                       | similarity 
----------+-----------------------------------------------+------------
      823 | CC1=CC(C)(C)Nc2cc3oc(=O)cc(C(F)(F)F)c3cc21    |          1
   262773 | CC1=CC(C)(C)Nc2cc3c(cc21)c(C(F)(F)F)cc(=O)n3C |       0.64
(2 rows)

Time: 1144.630 ms
chembl_13=# select * from get_mfp2_neighbors('CC1=CC(C)(C)Nc2cc3c(cc21)c(C(F)(F)F)cc(=O)n3C');
 molregno |                         m                          |    similarity     
----------+----------------------------------------------------+-------------------
   262773 | CC1=CC(C)(C)Nc2cc3c(cc21)c(C(F)(F)F)cc(=O)n3C      |                 1
   262707 | CCn1c(=O)cc(C(F)(F)F)c2cc3c(cc21)NC(C)(C)C=C3C     |  0.73469387755102
   262355 | Cc1c2c(cc3c(C(F)(F)F)cc(=O)n(C)c13)C(C)=CC(C)(C)N2 | 0.653061224489796
      823 | CC1=CC(C)(C)Nc2cc3oc(=O)cc(C(F)(F)F)c3cc21         |              0.64
   262741 | CC1=CC(C)(C)N(C)c2cc3c(cc21)c(C(F)(F)F)cc(=O)n3C   |              0.62
(5 rows)

Time: 1102.005 ms

}}}