#summary Reference manual for the RDKit database cartridge
#labels cartridge

= New Types =

  * `mol` : an rdkit molecule. Can be created from a SMILES via direct type conversion, for example: `'c1ccccc1'::mol` creates a molecule from the SMILES `'c1ccccc1'`
  * `qmol` : an rdkit molecule containing query features (i.e. constructed from SMARTS). Can be created from a SMARTS via direct type conversion, for example: `'c1cccc[c,n]1'::qmol` creates a query molecule from the SMARTS `'c1cccc[c,n]1'`
  * `sfp` : a sparse count vector fingerprint (`SparseIntVect` in C++ and Python)
  * `bfp` : a bit vector fingerprint (`ExplicitBitVect` in C++ and Python)

= Parameters =

  * `rdkit.tanimoto_threshold` : threshold value for the Tanimoto similarity operator. Searches done using Tanimoto similarity will only return results with a similarity of at least this value.
  * `rdkit.dice_threshold` : threshold value for the Dice similiarty operator. Searches done using Dice similarity will only return results with a similarity of at least this value.

= Operators =

== Similarity search ==
  * `%` : operator used for similarity searches using Tanimoto similarity. Returns whether or not the Tanimoto similarity between two fingerprints (either two `sfp` or two `bfp` values) exceeds `rdkit.tanimoto_threshold`.
  * `#` : operator used for similarity searches using Dice similarity. Returns whether or not the Dice similarity between two fingerprints (either two `sfp` or two `bfp` values) exceeds `rdkit.dice_threshold`.

== Substructure and exact structure search ==
  * `@>` : substructure search operator. Returns whether or not the `mol` or `qmol` on the right is a substructure of the `mol` on the left.
  * `<@` : substructure search operator. Returns whether or not the `mol` or `qmol` on the left is a substructure of the `mol` on the right.
  * `@=` : returns whether or not two molecules are the same.

== Molecule comparison ==
  * `<` : returns whether or not the left `mol` is less than the right `mol`
  * `>` : returns whether or not the left `mol` is greater than the right `mol`
  * `=` : returns whether or not the left `mol` is equal to the right `mol`
  * `<=` : returns whether or not the left `mol` is less than or equal to the right `mol`
  * `>=` : returns whether or not the left `mol` is greater than or equal to the right `mol`

_Note_: Two molecules are compared by making the following comparisons in order. Later comparisons are only made if the preceding values are equal:
  # Number of atoms
  # Number of bonds
  # Molecular weight
  # Number of rings
If all of the above are the same and the second molecule is a substructure of the first, the molecules are declared equal, Otherwise (should not happen) the first molecule is arbitrarily defined to be less than the second.

There are additional operators defined in the cartridge, but these are used for internal purposes.

= Functions =

== Fingerprint Related ==

=== Generating fingerprints ===
  * `morgan_fp(mol,int)` : returns an `sfp` which is the count-based Morgan fingerprint for a molecule using connectivity invariants. The second argument provides the radius. This is an ECFP-like fingerprint.
  * `morganbv_fp(mol,int)` : returns a `bfp` which is the bit vector Morgan fingerprint for a molecule using connectivity invariants. The second argument provides the radius. This is an ECFP-like fingerprint.
  * `featmorgan_fp(mol,int)` : returns an `sfp` which is the count-based Morgan fingerprint for a molecule using chemical-feature invariants. The second argument provides the radius. This is an FCFP-like fingerprint.
  * `featmorganbv_fp(mol,int)` : returns a `bfp` which is the bit vector Morgan fingerprint for a molecule using chemical-feature invariants. The second argument provides the radius. This is an FCFP-like fingerprint.
  * `rdkit_fp(mol)` : returns a `bfp` which is the RDKit fingerprint for a molecule. This is a daylight-fingerprint using hashed molecular subgraphs.
  * `atompair_fp(mol)` : returns an `sfp` which is the count-based atom-pair fingerprint for a molecule.
  * `atompairbv_fp(mol)` : returns a `bfp` which is the bit vector atom-pair fingerprint for a molecule.
  * `torsion_fp(mol)` : returns an `sfp` which is the count-based topological-torsion fingerprint for a molecule.
  * `torsionbv_fp(mol)` : returns a `bfp` which is the bit vector topological-torsion fingerprint for a molecule.
  * `layered_fp(mol)` : returns a `bfp` which is the layered fingerprint for a molecule. This is an experimental substructure fingerprint using hashed molecular subgraphs. 

=== Working with fingerprints ===
  * `tanimoto_sml(fp,fp)` : returns the Tanimoto similarity between two fingerprints of the same type (either two `sfp` or two `bfp` values).
  * `dice_sml(fp,fp)` : returns the Dice similarity between two fingerprints of the same type (either two `sfp` or two `bfp` values).
  * `size(bfp)` : returns the length of (number of bits in) a `bfp`.
  * `add(sfp,sfp)` : returns an `sfp` formed by the element-wise addition of the two `sfp` arguments.
  * `subtract(sfp,sfp)` : returns an `sfp` formed by the element-wise subtraction of the two `sfp` arguments.

== Molecule Related ==
  * `is_valid_smiles(smiles)` : returns whether or not a SMILES string produces a valid RDKit molecule.
  * `is_valid_smarts(smarts)` : returns whether or not a SMARTS string produces a valid RDKit molecule.
  * `mol_amw(mol)` : returns the AMW for a molecule.
  * `mol_logp(mol)` : returns the MolLogp for a molecule.
  * `mol_hba(mol)` : returns the number of Lipinski H-bond acceptors (i.e. number of Os and Ns) for a molecule.
  * `mol_hbd(mol)` : returns the number of Lipinski H-bond donors (i.e. number of Os and Ns that have at least one H) for a molecule.
  * `mol_numatoms(mol)` : returns the total number of atoms in a molecule.
  * `mol_numheavyatoms(mol)` : returns the number of heavy atoms in a molecule.
  * `mol_numrotatablebonds(mol)` : returns the number of rotatable bonds in a molecule (_available from {{{2011_03}}} release_).

== Other ==
  * `rdkit_version()` : returns a string with the cartridge version number.

There are additional functions defined in the cartridge, but these are used for internal purposes.