#summary Getting explanations of the bits in a Morgan fingerprint
#labels Tutorial

= Introduction =


_in progress_

= Details =

Start by getting bit info by re-building the fingerprint with the `bitInfo` argument:
{{{
In [23]: m = Chem.MolFromSmiles('c1cccnc1C')

In [24]: info={}

In [25]: fp = AllChem.GetMorganFingerprint(m,2,bitInfo=info)

In [26]: info
Out[26]: 
{98513984: ((1, 1), (2, 1)),
 422715066: ((6, 1),),
 951226070: ((0, 1),),
 1100037548: ((4, 1),),
 1207774339: ((2, 2),),
 1235524787: ((0, 2),),
 1751362425: ((4, 2),),
 2041434490: ((4, 0),),
 2246728737: ((6, 0),),
 2614860224: ((3, 2),),
 3217380708: ((5, 0),),
 3218693969: ((0, 0), (1, 0), (2, 0), (3, 0)),
 3776905034: ((3, 1),),
 3999906991: ((1, 2),),
 4036277955: ((5, 1),),
 4048591891: ((5, 2),)}

}}}
The keys for the dictionary are bit ids. The values are 2-tuples `(atomId,radius)` for the atoms setting each bit. So in the example above, bit 98513984 is set twice: once by atom 1 at radius 1 and once by atom 2 at radius 1.

Suppose we're interested in explaining bit 4048591891, which is set by atom 5 at radius 2. The trick is to generate the appropriate atom environment using the function `Chem.FindAtomEnvironmentOfRadiusN()` and then to convert that environment into a submolecule:
{{{
In [27]: env=Chem.FindAtomEnvironmentOfRadiusN(m,2,5)
In [28]: amap={}

In [29]: submol = Chem.PathToSubmol(m,env,atomMap=amap)

In [30]: submol.GetNumAtoms()
Out[30]: 6

}}}
The `atomMap` provides the mapping between atom index in the original molecule and atom index in the submoleule. We can use this to construct a SMILES rooted at the equivalent of atom 5:
{{{
In [31]: amap
Out[31]: {0: 3, 1: 5, 3: 4, 4: 0, 5: 1, 6: 2}

In [32]: Chem.MolToSmiles(submol,rootedAtAtom=amap[5],canonical=False)
Out[32]: 'c(nc)(C)cc'

}}}

It's also possible to generate an image of the molecule with the atoms highlighted:
{{{
In [45]: Draw.MolToImageFile(m,'env.png',highlightAtoms=amap.keys)

}}}
and to display that directly:
{{{
In [46]: Draw.ShowMol(m,highlightAtoms=amap.keys())

}}}