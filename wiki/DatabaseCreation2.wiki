#summary Creating and using a chemical database 2: Working with the eMolecules catalog.
#labels cartridge,Tutorial,InProgress

*Note* This example relies on cartridge functionality that was added for the Q4 2010 release. It will not work with the Q3 2010 release.

= Introduction =
 
In this example I show how to load a database from the SMILES file of commercially available compounds that is downloadable from emolecules.com at URL http://www.emolecules.com/doc/plus/download-database.php

If you choose to repeat this exact example yourself, please note that it takes several hours to load the 5 million row database and generate all fingerprints. The timing information below was collected on a commodity desktop PC (Dell Studio XPS with a 2.9GHz i7 CPU and 8GB of RAM) running Ubuntu 10.10 and using PostgreSQL v9.0.1. The database was installed with default parameters.

I started experiencing performance problems when building the indices for the fingerprints (and maybe beforehand), so from that point forward I changed a couple of postgres configuration settings:
{{{
fsync = off				# turns forced synchronization on or off
synchronous_commit = off		# immediate fsync at commit
full_page_writes = off			# recover from partial page writes
}}}

= Creating the database =

First create the database and install the cartridge:
{{{
~/RDKit_trunk/Data/emolecules > createdb emolecules
~/RDKit_trunk/Data/emolecules > psql emolecules < /usr/local/pgsql/share/contrib/rdkit.sql 
}}}

Now create and populate a table holding the raw data:
{{{
~/RDKit_trunk/Data/emolecules > psql -c 'create table raw_data (id SERIAL, smiles text, emol_id integer)' emolecules 
NOTICE:  CREATE TABLE will create implicit sequence "raw_data_id_seq" for serial column "raw_data.id"
CREATE TABLE
~/RDKit_trunk/Data/emolecules > sed '1d; s/\\/\\\\/' eMolecules-2010-03-01.smi | psql -c "copy raw_data (smiles,emol_id) from STDIN with delimiter ' '" emolecules
}}}

Create the molecule table, but only for SMILES that the RDKit accepts:
{{{
~/RDKit_trunk/Data/emolecules > psql emolecules
psql (9.0.1)
Type "help" for help.

emolecules=# \timing
Timing is on.
emolecules=# select id,smiles::mol m into mols from raw_data where is_valid_smiles(smiles::cstring);
SELECT 5017153
Time: 4039006.013 ms

emolecules=# create index molidx on mols using gist(m);
CREATE INDEX
Time: 7832764.891 ms
}}}

The last step is only required if you plan to do substructure searches.

= Some substructure-search queries =

Example query molecules taken from the [http://www.emolecules.com/ eMolecules home page].

{{{
emolecules=# select count(*) from mols where m@>'c1cccc2c1nncc2' ;
 count 
-------
   996
(1 row)

Time: 2436.635 ms
emolecules=# select count(*) from mols where m@>'c1ccnc2c1nccn2' ;
 count 
-------
  1366
(1 row)

Time: 763.011 ms
emolecules=# select count(*) from mols where m@>'c1cncc2n1ccn2' ;
 count 
-------
   523
(1 row)

Time: 2281.622 ms
emolecules=# select count(*) from mols where m@>'Nc1ncnc(N)n1' ;
 count 
-------
 14227
(1 row)

Time: 3833.766 ms
}}}
Notice that the last query is starting to take a while to execute and count all the results. This is even more extreme with the next few queries:
{{{
emolecules=# select count(*) from mols where m@>'c1scnn1' ;
 count 
-------
 88564
(1 row)

Time: 31649.670 ms
emolecules=# select count(*) from mols where m@>'c1cccc2c1CNCCN2' ;
 count 
-------
  2509
(1 row)

Time: 52627.068 ms
emolecules=# select count(*) from mols where m@>'c1cccc2c1ncs2' ;
 count 
-------
 95288
(1 row)

Time: 55260.154 ms
}}}

Given we're searching through 5 million compounds these search times aren't incredibly slow, but it would be nice to have them quicker.

One easy way to speed things up is to return the results in blocks and to present them in pages. This isn't possible to demonstrate on a static web page like this, but here's what the queries look like and how long they take to execute:

{{{
emolecules=# select * from mols where m@>'c1cccc2c1ncs2' limit 100 ;
   id    |                                  m                                   
---------+----------------------------------------------------------------------
 4008560 | Cc1nnnn1/C(=C\c1ccccc1)C(=O)N1C(c2sc3c(n2)cccc3)CCC1
 4009030 | O=C(CCCc1nc2ccccc2s1)N1CCN(C/C=C/c2ccccc2)CC1
...
 4011636 | Cc1ccc(C(N[C@@H](C(C)C)C(Nc2ccc(-c3nc4ccc(C)cc4s3)cc2)=O)=O)cc1
 4011638 | Cc1ccc(-c2nn(-c3ccccc3)cc2/C=C/C(=O)Nc2ccc(-c3sc4cc(C)ccc4n3)cc2)cc1
(100 rows)

Time: 77.496 ms
emolecules=# select * from mols where m@>'c1cccc2c1ncs2' limit 100 offset 100;
   id    |                                      m                                       
---------+------------------------------------------------------------------------------
 4011639 | Cc1cc2sc(-c3ccc(NC(=O)/C=C/c4cn(-c5ccccc5)nc4-c4ccc(-c5ccccc5)cc4)cc3)nc2cc1
 4011640 | Cc1ccc2nc(-c3ccc(NC([C@H]4N(C(c5cccs5)=O)CCC4)=O)cc3)sc2c1
...
 4005886 | N#CC1(NC(COC(/C=C/c2nc3ccccc3s2)=O)=O)CCCC1
 4005887 | c1ccc2sc(/C=C/C(OCC(Nc3ccc(C(N(C)C)=O)cc3)=O)=O)nc2c1
(100 rows)

Time: 83.653 ms
}}}

=== SMARTS-based queries ===

Oxadiazole or thiadiazole:
{{{
emolecules=# select * from mols where m@>'c1[o,s]ncn1'::qmol limit 1000;
   id    |                               m                                
---------+----------------------------------------------------------------
 4438222 | CCCCCCCc1ccc(/C=C/c2onc(-c3ccncc3)n2)cc1
 4440841 | COc1ccc(Cc2noc(/C=C/c3ccc(C)cc3)n2)cc1OC
...
Time: 1757.302 ms
emolecules=# select * from mols where m@>'c1[o,s]ncn1'::qmol limit 1000 offset 1000;
...
Time: 4497.175 ms
}}}

Notice that this is substantially slower than the the pure SMILES query. Adding additional query features exacerbates the situation:

= Creating some fingerprints and the fingerprint indices =
{{{
emolecules=# select id,atompairbv_fp(m) as pairbv,torsionbv_fp(m) as torsionbv,morganbv_fp(m,2) as morganbv into fps from mols;
SELECT 5017153
Time: 2076418.889 ms
emolecules=# create index mfp2idx on fps using gist(mfp2);
CREATE INDEX
Time: 196840.650 ms
emolecules=# create index torsionbvidx on fps using gist(torsionbv);  
CREATE INDEX
Time: 246857.303 ms
emolecules=# create index apbvidx on fps using gist(pairbv);
CREATE INDEX
Time: 287168.672 ms
}}}

Add a couple of additional pieces of information to make doing useful similarity queries easier:
{{{
emolecules=# alter table mols add primary key (id);
NOTICE:  ALTER TABLE / ADD PRIMARY KEY will create implicit index "mols_pkey" for table "mols"
ALTER TABLE
Time: 4569.755 ms
emolecules=# alter table fps add foreign key (id) references mols;
ALTER TABLE
Time: 13313.012 ms
}}}

= Similarity searches =

Simple performance tests:
{{{
emolecules=# select count(*) from fps where mfp2%morganbv_fp('Cc1ccc2nc(-c3ccc(NC([C@H]4N(C(c5cccs5)=O)CCC4)=O)cc3)sc2c1',2);
 count 
-------
   367
(1 row)

Time: 2765.546 ms
emolecules=# select count(*) from fps where torsionbv%torsionbv_fp('Cc1ccc2nc(-c3ccc(NC([C@H]4N(C(c5cccs5)=O)CCC4)=O)cc3)sc2c1');
 count 
-------
  1059
(1 row)

Time: 13277.728 ms
}}}

More realistic queries: give me the 50 most similar molecules:
{{{
emolecules=# select id,m,sim from (select
  id,tanimoto_sml(mfp2,morganbv_fp('Cc1ccc2nc(-c3ccc(NC([C@H]4N(C(c5cccs5)=O)CCC4)=O)cc3)sc2c1',2)) sim
  from fps where mfp2%morganbv_fp('Cc1ccc2nc(-c3ccc(NC([C@H]4N(C(c5cccs5)=O)CCC4)=O)cc3)sc2c1',2) 
  order by sim desc limit 50) tmp 
join mols using (id);
   id    |                                 m                                 |        sim        
---------+-------------------------------------------------------------------+-------------------
 4011640 | Cc1ccc2nc(-c3ccc(NC([C@H]4N(C(c5cccs5)=O)CCC4)=O)cc3)sc2c1        |                 1
 2048437 | Cc1ccc2sc(-c3ccc(NC(C4N(C(c5cccs5)=O)CCC4)=O)cc3)nc2c1            |             0.875
 4014354 | c1csc(C(N2[C@H](C(Nc3ccc(-c4nc5ccccc5s4)cc3)=O)CCC2)=O)c1         |          0.796875
 2388105 | Cc1ccc2nc(NC(=O)C3N(C(c4cccs4)=O)CCC3)sc2c1                       |          0.765625
...
 2284219 | Cc1ccc(-c2noc(NC(C3N(C(c4cccs4)=O)CCC3)=O)c2)cc1                  | 0.591549295774648
 4019664 | FC(F)(F)c1ccc(NC(=O)[C@H]2N(C(c3cccs3)=O)CCC2)cc1                 | 0.590909090909091
(50 rows)

Time: 24431.555 ms
}}}
}}}

----
[http://www.postgresql.org http://www.postgresql.org/files/community/propaganda/95x51_4.gif]