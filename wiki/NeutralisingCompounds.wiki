#summary A set of SMARTS patterns in Python code to neutralise ionised molecules
#labels Tutorial

= Introduction =

This page results from a question posted by Andrew Dalke on the RDKit mailing list:

_"Is there anything in RDKit to neutralize charges, like what
Corina does with the 'neu' option? Quoting from the
Corina documentation:

   _â€¢ The new option -d neu neutralizes formal
   charges at acids, alcoholates, and basic nitrogens
   by adding or removing protons. Often it is useful
   to have all molecules of a database in the same
   protonation state.

This feels like a set of simple structure transformations."

In response to Andrew's original question, this wiki contains the recipe that we - at Silicos-it - are using to active this. It is definitely not complete and therefore - hopefully - could serve as a basis for other people to build further on it by including additional SMARTS patterns.

= Details =

{{{
#!/usr/local/bin/python     

from rdkit import Chem
from rdkit.Chem import AllChem


def InitiateNeutralisationReactions():
    return {
        # Imidazoles
        Chem.MolFromSmarts('[n+;H]'):					Chem.MolFromSmarts('n'),
        # Amines
        Chem.MolFromSmarts('[N+;H]'):					Chem.MolFromSmarts('N'),
        # Carboxylic acids
        Chem.MolFromSmarts('[$([O-]);!$([O-][#7])]'):	Chem.MolFromSmarts('O'),
        # Thiols
        Chem.MolFromSmarts('[S-;X1]'):					Chem.MolFromSmarts('S'),
      	# Sulfonamides
        Chem.MolFromSmarts('[N-;X2]S(=O)=O'):			Chem.MolFromSmarts('N'),
        # Enamines
        Chem.MolFromSmarts('[N-;X2][C,N]=C'):			Chem.MolFromSmarts('N'),
        # Tetrazoles
        Chem.MolFromSmarts('[n-]'):						Chem.MolFromSmarts('n'),
        # Sulfoxides
        Chem.MolFromSmarts('[S-]=O'):					Chem.MolFromSmarts('S'),
        # Amides
        Chem.MolFromSmarts('[N-]C=O'):					Chem.MolFromSmarts('N'),
    }


def NeutraliseCharges(smiles, reaction):
	mol = Chem.MolFromSmiles(smiles)
	replaced = False
	for reactant, product in reaction.iteritems():
		while mol.HasSubstructMatch(reactant):
			replaced = True
			rms = AllChem.ReplaceSubstructs(mol, reactant, product)
			mol = rms[0]
	if replaced:
		return (Chem.MolToSmiles(mol), True)
	else:
		return (smiles, False)


def main(): 
	
	# Initiating neutralisation reactions
	reactions = InitiateNeutralisationReactions()
		
	# Processing the compounds
	supplier = Chem.SDMolSupplier("mifile")
	for mol in supplier:
		smiles = Chem.MolToSmiles(mol)
		(molSmiles, neutralised) = NeutraliseCharges(smiles, reactions)
		


if __name__ == "__main__":
	main()
}}}

Created by Hans De Winter on October 15, 2012